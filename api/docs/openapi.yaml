openapi: 3.0.3
info:
  title: Portfolio Fullstack API
  version: 1.0.0
  description: >-
    Minimal OpenAPI spec covering authentication and projects endpoints.
servers:
  - url: http://localhost:4000
    description: Local dev server
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        role:
          type: string
    Project:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        stack:
          type: array
          items:
            type: string
        userId:
          type: integer
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        details:
          type: array
          items:
            type: object
    RegisterRequest:
      type: object
      required: [name, email, password]
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    ProjectCreateRequest:
      type: object
      required: [title, description, stack, userId]
      properties:
        title:
          type: string
        description:
          type: string
        stack:
          type: array
          items:
            type: string
        userId:
          type: integer
paths:
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
            examples:
              example-1:
                summary: Happy path
                value:
                  name: "Alice Admin"
                  email: "alice@example.com"
                  password: "secret123"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
              examples:
                created:
                  value:
                    user:
                      id: 1
                      name: "Alice Admin"
                      email: "alice@example.com"
                      role: "USER"
        "400":
          $ref: "#/components/schemas/ErrorResponse"
  /auth/login:
    post:
      summary: Login and set auth cookie
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
            examples:
              example-1:
                summary: Login example
                value:
                  email: "alice@example.com"
                  password: "secret123"
      responses:
        "200":
          description: OK (cookie set)
          content:
            application/json:
              examples:
                success:
                  value:
                    user:
                      id: 1
                      name: "Alice Admin"
                      email: "alice@example.com"
                      role: "USER"
        "401":
          $ref: "#/components/schemas/ErrorResponse"
  /auth/logout:
    post:
      summary: Logout (clear cookie)
      responses:
        "204":
          description: No Content
  /projects:
    get:
      summary: List projects
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
        - name: stack
          in: query
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
              examples:
                example-1:
                  value:
                    - id: 1
                      title: "Test Project"
                      description: "Test Description"
                      stack: ["Node.js", "TypeScript"]
                      userId: 1
                    - id: 2
                      title: "Another Project"
                      description: "Another description"
                      stack: ["React", "Vercel"]
                      userId: 2
    post:
      summary: Create a project (admin)
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectCreateRequest"
            examples:
              example-1:
                summary: Create project
                value:
                  title: "New Site"
                  description: "A new portfolio site"
                  stack: ["Node.js", "TypeScript"]
                  userId: 1
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
              examples:
                created:
                  value:
                    id: 10
                    title: "New Site"
                    description: "A new portfolio site"
                    stack: ["Node.js", "TypeScript"]
                    userId: 1
        "403":
          $ref: "#/components/schemas/ErrorResponse"
  /projects/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get project by id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
              examples:
                example-1:
                  value:
                    id: 1
                    title: "Test Project"
                    description: "Test Description"
                    stack: ["Node.js", "TypeScript"]
                    userId: 1
        "404":
          $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update a project (admin)
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
            examples:
              example-1:
                summary: Update title
                value:
                  title: "Updated Project"
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
              examples:
                updated:
                  value:
                    id: 1
                    title: "Updated Project"
                    description: "Test Description"
                    stack: ["Node.js", "TypeScript"]
                    userId: 1
        "403":
          $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Delete a project (admin)
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              examples:
                success:
                  value:
                    message: "Project deleted"
        "403":
          $ref: "#/components/schemas/ErrorResponse"

  # reusable error example
components:
  examples:
    UnauthorizedError:
      summary: Unauthorized
      value:
        error: "Unauthorized"
        details: []
